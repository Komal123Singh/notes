Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> #module
>>> def fun():
	print("in fun")
	def fun1():
		print("in fun1")
	return fun1

>>> fun()
in fun
<function fun.<locals>.fun1 at 0x00F6F390>
>>> fun()()
in fun
in fun1
>>> 
>>> 
>>> 
>>> def fun(func):
	a=int(input("enter a number"))
	x=func(a)
	if a==x[0]:
		print("its a ",x[1])
	else:
		print("its not a",x[1])

		
>>> def arm(n):
	return sum([int(i)**len(str(n)) for i in str(n)]),'armstrong'

>>> arm(123)
(36, 'armstrong')
>>> arm(153)
(153, 'armstrong')
>>> def fun(func):
	a=int(input("enter a number"))
	x=func(a)
	if a==x[0]:
		print("its a ",x[1])
	else:
		print("its not a",x[1])

		
>>> @fun
def arm(n):
	return sum([int(i)**len(str(n)) for i in str(n)]),'armstrong'

enter a number153
its a  armstrong
>>> @fun
def pallin(n):
	return int(str(n)[::-1]),'Pallindrome'

enter a number123
its not a Pallindrome
>>> @fun
def pallin(n):
	return int(str(n)[::-1]),'Pallindrome'
121
SyntaxError: invalid syntax
>>> @fun
def pallin(n):
	return int(str(n)[::-1]),'Pallindrome'

enter a number121
its a  Pallindrome
>>> def fun(func):
	a=int(input("enter a number"))
	x=func(a)
	if a==x[0]:
		print("its a ",x[1])
	else:
		print("its not a",x[1])

		
>>> def pallin(n):
	return int(str(n)[::-1]),'Pallindrome'

>>> fun(pallin)
enter a number121
its a  Pallindrome
>>> def fun(func):
	a=int(input("enter a number"))
	x=func(a)
	print(x,func)
	if a==x[0]:
		print("its a ",x[1])
	else:
		print("its not a",x[1])

		
>>> fun(pallin)
enter a number121
(121, 'Pallindrome') <function pallin at 0x00F6F390>
its a  Pallindrome
>>> 
>>> #module
>>> 
>>> import string
>>> string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
>>> string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
>>> 
>>> import string as s
>>> s.digits
'0123456789'
>>> s.hexdigits
'0123456789abcdefABCDEF'
>>> s.octdigits
'01234567'
>>> from string import digits
>>> digits
'0123456789'
>>> hexdigits
Traceback (most recent call last):
  File "<pyshell#59>", line 1, in <module>
    hexdigits
NameError: name 'hexdigits' is not defined
>>> from string import digits as d
>>> d
'0123456789'
>>> from string import digits,hexdigits
>>> d
'0123456789'
>>> digits
'0123456789'
>>> hexdigits
'0123456789abcdefABCDEF'
>>> from string import *
>>> from math import *
>>> pow(3,2,5)
Traceback (most recent call last):
  File "<pyshell#68>", line 1, in <module>
    pow(3,2,5)
TypeError: pow() takes exactly 2 arguments (3 given)
>>> 
>>> 
>>> 
>>> sin(1)
0.8414709848078965
>>> cos(10)
-0.8390715290764524
>>> 
>>> import time
>>> time.ctime()
'Tue Jul  9 15:06:07 2019'
>>> time.time()
1562665016.2130218
>>> time.localtime(time.time())
time.struct_time(tm_year=2019, tm_mon=7, tm_mday=9, tm_hour=15, tm_min=8, tm_sec=4, tm_wday=1, tm_yday=190, tm_isdst=0)
>>> time.asctime(time.localtime(time.time()))
'Tue Jul  9 15:09:44 2019'
>>> time.asctime(time.localtime(time.time()+86400))
'Wed Jul 10 15:10:08 2019'
>>> time.asctime(time.localtime(time.time()+86400*2))
'Thu Jul 11 15:10:27 2019'
>>> time.asctime(time.localtime(time.time()+86400*10))
'Fri Jul 19 15:10:33 2019'
>>> time.asctime(time.localtime(0))
'Thu Jan  1 05:30:00 1970'
>>> time.tzname
('India Standard Time', 'India Daylight Time')
>>> time.sleep(5)
>>> 
>>> 
>>> import calendar as c
>>> a='12 67 6 5 4 3 2 1  98 7 6  5'
>>> [int(i) for i in a.split()]
[12, 67, 6, 5, 4, 3, 2, 1, 98, 7, 6, 5]
>>> list(map(int,a.split()))
[12, 67, 6, 5, 4, 3, 2, 1, 98, 7, 6, 5]
>>> st=time.time()
>>> 
 RESTART: C:/Users/amit/Desktop/summer_trainning_2019/python-6-batch/timewala.py 
list 0.0
map 0.0
>>> 
 RESTART: C:/Users/amit/Desktop/summer_trainning_2019/python-6-batch/timewala.py 
list 0.0920870304107666
map 0.05498147010803223
>>> 
 RESTART: C:/Users/amit/Desktop/summer_trainning_2019/python-6-batch/timewala.py 
list 0.09515380859375
map 0.05604863166809082
extend 0.007934808731079102
>>> 
 RESTART: C:/Users/amit/Desktop/summer_trainning_2019/python-6-batch/timewala.py 
list 0.025956392288208008
map 0.08512592315673828
extend 0.014011621475219727
direct 0.015012979507446289
>>> 
>>> 
>>> import calendar as c
>>> print(c.calendar(2020))

>>> c.prcal(2020)

>>> print(c.month(2020,1))
    January 2020
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31

>>> c.prmonth(2019,12)
   December 2019
Mo Tu We Th Fr Sa Su
                   1
 2  3  4  5  6  7  8
 9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31
>>> c.isleap(2019)
False
>>> c.leapdays(2000,2019)
5
>>> c.weekday(2019,7,9)
1
>>> c.weekday(2019,7,7)
6
>>> c.weekday(2019,7,8)
0
>>> #re
>>> import random
>>> random.randrange(1,2000)
474
>>> import numpy as np
>>> np.random.chisquare(1,20)
array([1.37437239e+00, 1.46592658e-01, 8.13048524e-03, 2.44330081e+00,
       4.47105226e+00, 1.90041323e-01, 7.38015293e-01, 6.37167968e-02,
       5.23403176e-01, 7.03172843e-01, 1.53344093e+00, 4.63832336e-01,
       1.52361844e+00, 3.73149808e-01, 5.85298372e-01, 1.63765481e+00,
       1.60769745e+01, 3.99474846e+00, 1.39809247e-01, 7.84582855e-01])
>>> np.random.random(1,20)
Traceback (most recent call last):
  File "<pyshell#111>", line 1, in <module>
    np.random.random(1,20)
  File "mtrand.pyx", line 819, in mtrand.RandomState.random_sample
TypeError: random_sample() takes at most 1 positional argument (2 given)
>>> np.random.rand(1,50)
array([[0.07640243, 0.30312885, 0.30699742, 0.45347123, 0.295066  ,
        0.6147617 , 0.0109049 , 0.8115188 , 0.87672805, 0.58944424,
        0.18467697, 0.82245738, 0.93546002, 0.81083435, 0.49580711,
        0.27160343, 0.01990419, 0.66631265, 0.50823452, 0.02839339,
        0.88087008, 0.8342097 , 0.31224349, 0.74552461, 0.2553718 ,
        0.43469892, 0.69096754, 0.30223937, 0.14969442, 0.47157922,
        0.32534717, 0.37500798, 0.07409837, 0.47050166, 0.90751632,
        0.6574713 , 0.42390886, 0.63571258, 0.22635745, 0.0921506 ,
        0.03010438, 0.84199052, 0.04229592, 0.34300474, 0.97377555,
        0.71158598, 0.69996558, 0.12430015, 0.93788874, 0.58208032]])
>>> 
>>> 
>>> 
>>> 
>>> #re
>>> import re
>>> re.match(r'.','@123')
<re.Match object; span=(0, 1), match='@'>
>>> re.match(r'\w','@123')
>>> re.match(r'.\w','@123')
<re.Match object; span=(0, 2), match='@1'>
>>> re.match(r'.\W','@123')
>>> re.match(r'\W.','@123')
<re.Match object; span=(0, 2), match='@1'>
>>> re.match(r'\W\d','@123')
<re.Match object; span=(0, 2), match='@1'>
>>> re.match(r'\W\D','@123')
>>> re.match(r'\W\D','@a123')
<re.Match object; span=(0, 2), match='@a'>
>>> re.match(r'\W\s','@ a123')
<re.Match object; span=(0, 2), match='@ '>
>>> re.match(r'\W\S','@a123')
<re.Match object; span=(0, 2), match='@a'>
>>> 
>>> 
>>> 
>>> 
>>> re.search(r'\d',"@we234q6")
<re.Match object; span=(3, 4), match='2'>
>>> re.search(r'.',"@we234q6")
<re.Match object; span=(0, 1), match='@'>
>>> re.search(r'\W',"@we234q6")
<re.Match object; span=(0, 1), match='@'>
>>> re.search(r'\D',"@we234q6")
<re.Match object; span=(0, 1), match='@'>
>>> re.search(r'\w',"@we234q6")
<re.Match object; span=(1, 2), match='w'>
>>> re.search(r'\s',"@we234\nq 6")
<re.Match object; span=(6, 7), match='\n'>
>>> re.search(r'\S',"@we234\nq 6")
<re.Match object; span=(0, 1), match='@'>
>>> 
>>> 
>>> a='hello mr john your id is 9868765342 and amount is 7656545645'
>>> re.findall(r'\d',a)
['9', '8', '6', '8', '7', '6', '5', '3', '4', '2', '7', '6', '5', '6', '5', '4', '5', '6', '4', '5']
>>> re.findall(r'\d+',a)
['9868765342', '7656545645']
>>> re.findall(r'\d{2,5}',a)
['98687', '65342', '76565', '45645']
>>> a='hello mr john your id is 986876534212 and amount is 7656545645234'
>>> re.findall(r'\d{2,5}',a)
['98687', '65342', '12', '76565', '45645', '234']
>>> re.findall(r'\d{5}',a)
['98687', '65342', '76565', '45645']
>>> 
>>> re.findall(r'[0-5]',a)
['5', '3', '4', '2', '1', '2', '5', '5', '4', '5', '4', '5', '2', '3', '4']
>>> re.findall(r'[0-5]+',a)
['534212', '5', '545', '45234']
>>> 
>>> a='hello python runs on Cython is jython on Python'
>>> re.findall(r'[p|P]ython',a)
['python', 'Python']
>>> a='hello Python RUNS on Cython is Jython on Python'
>>> re.findall(r'[A-Z]ython',a)
['Python', 'Cython', 'Jython', 'Python']
>>> def fun():
	return 'a'
                return
        
SyntaxError: unexpected indent
>>> def fun():
	return'c'
	return 'b'
	return 'a'

>>> 
